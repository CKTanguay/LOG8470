/* Constants */
#define N 4

/* Global variables */
byte I;
byte flag[N];
bool procEnSectionCritique;

proctype mutualExclusion(byte index) {
	
	byte counter;
	counter = 0;
	
	/* LIGNE 2 */ 

	atomic { flag[index] = 1; } 
	
	/* LIGNE 3*/
	
	do
	:: counter < N && flag[counter] < 3 -> counter++
	:: counter < N && flag[counter] >= 3 -> counter = 0
	:: counter >= N -> break
	od;

	/*LIGNE 4*/
	
	atomic { flag[index] = 3; }
		
	/* LIGNE 5 */

	counter = 0;

	do
	:: counter < N && flag[counter] == 1 -> goto L1
	:: counter < N && flag[counter] != 1 -> counter++
	:: counter >= N -> goto L2
	od;

L1:	/* LIGNE 6 */
	
	atomic { flag[index] = 2; } 

	/* LIGNE 7 */

	counter = 0;

	do
	:: counter < N && flag[counter] == 4 -> goto L2
	:: counter < N && flag[counter] != 4 -> counter++
	:: counter >= N -> counter = 0
	od;

L2: 
	/* LIGNE 8 */
	atomic { flag[index] = 4; }

	/* LIGNE 9 */
	
	counter = 0;

	do
	:: counter < index && flag[counter] < 2 -> counter++
	:: counter < index && flag[counter] >= 2 -> counter = 0
	:: counter >= index -> break
	od;

	/* LIGNE 10 SECTION CRITIQUE */
	procEnSectionCritique++;
	
	procEnSectionCritique--;

	/* LIGNE 11 */

	counter = index + 1;	

	do
	:: counter < N && (flag[counter] == 0 || flag[counter] == 1 || flag[counter] == 4)  -> counter++
	:: counter < N && (flag[counter] == 2 || flag[counter] == 3) -> counter = index + 1
	:: counter >= N -> break
	od;

	counter = 0
	
	/* LIGNE 12 */

	atomic { flag[index] = 0; }
}


init {
	byte proc;
	byte i;
	byte Ini[4];	/* N<=4 randomize the process numbers */
	atomic {

		I = 0;	/* pick a number to be assigned 1..N */
		do
		:: I < N ->
			if	/* non-deterministic choice */
			:: Ini[0] == 0 && N >= 1 -> Ini[0] = I
			:: Ini[1] == 0 && N >= 2 -> Ini[1] = I
			:: Ini[2] == 0 && N >= 3 -> Ini[2] = I
			:: Ini[3] == 0 && N >= 4 -> Ini[3] = I
			fi;
			I++
		:: I >= N ->	/* assigned all numbers 1..N */
			break
		od;

		proc = 1;
		i = 0;
		do
		:: proc <= N ->
			run mutualExclusion(Ini[i]);
			proc++;
			i++;
		:: proc > N -> break
		od
	}
}
